// Code generated by MockGen. DO NOT EDIT.
// Source: ./webook/internal/service/code.go
//
// Generated by this command:
//
//	mockgen -source=./webook/internal/service/code.go -package=svcmocks -destination=./webook/internal/service/mocks/code.mock.go
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCodeSerVice is a mock of CodeSerVice interface.
type MockCodeSerVice struct {
	ctrl     *gomock.Controller
	recorder *MockCodeSerViceMockRecorder
}

// MockCodeSerViceMockRecorder is the mock recorder for MockCodeSerVice.
type MockCodeSerViceMockRecorder struct {
	mock *MockCodeSerVice
}

// NewMockCodeSerVice creates a new mock instance.
func NewMockCodeSerVice(ctrl *gomock.Controller) *MockCodeSerVice {
	mock := &MockCodeSerVice{ctrl: ctrl}
	mock.recorder = &MockCodeSerViceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeSerVice) EXPECT() *MockCodeSerViceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockCodeSerVice) Send(ctx context.Context, biz, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, biz, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCodeSerViceMockRecorder) Send(ctx, biz, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCodeSerVice)(nil).Send), ctx, biz, phone)
}

// Verify mocks base method.
func (m *MockCodeSerVice) Verify(ctx context.Context, biz, phone, inputCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, biz, phone, inputCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockCodeSerViceMockRecorder) Verify(ctx, biz, phone, inputCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCodeSerVice)(nil).Verify), ctx, biz, phone, inputCode)
}
