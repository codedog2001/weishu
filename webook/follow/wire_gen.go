// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"xiaoweishu/webook/follow/grpc"
	"xiaoweishu/webook/follow/ioc"
	"xiaoweishu/webook/follow/repository"
	"xiaoweishu/webook/follow/repository/cache"
	"xiaoweishu/webook/follow/repository/dao"
	"xiaoweishu/webook/follow/service"
	ioc2 "xiaoweishu/webook/ioc"
)

// Injectors from wire.go:

func Init() *App {
	loggerV1 := ioc.InitLogger()
	db := ioc.InitDB(loggerV1)
	followRelationDao := dao.NewGORMFollowRelationDAO(db)
	cmdable := ioc2.InitRedis()
	followCache := cache.NewRedisFollowCache(cmdable)
	followRepository := repository.NewFollowRelationRepository(followRelationDao, followCache, loggerV1)
	followRelationService := service.NewFollowRelationService(followRepository)
	followServiceServer := grpc.NewFollowRelationServiceServer(followRelationService)
	client := ioc2.InitEtcd()
	server := ioc.InitGRPCxServer(followServiceServer, client, loggerV1)
	app := &App{
		server: server,
	}
	return app
}

// wire.go:

var serviceProviderSet = wire.NewSet(cache.NewRedisFollowCache, dao.NewGORMFollowRelationDAO, repository.NewFollowRelationRepository, service.NewFollowRelationService, grpc.NewFollowRelationServiceServer, ioc2.InitRedis)

var thirdProvider = wire.NewSet(ioc.InitDB, ioc.InitLogger, ioc2.InitEtcd)
